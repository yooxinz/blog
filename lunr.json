{"/post/githubBlogDomainBinding":{"url":"post/githubBlogDomainBinding","title":"github博客域名绑定","date":"2017-07-25","tags":["blog","github","Domain","hugo"],"body":" ##github博客域名绑定 通过github创建的blog绑定域名时出现不加载js css.可以尝试该方法 hugo的config.toml文件中需要指定访问地址 baseurl = \"https://githubname.github.io\" 这里的baseurl必须指向blog的github地址. "},"/post/gitignore":{"url":"post/gitignore","title":"Git忽略规则及.gitignore规则不生效的解决办法","date":"2017-05-01","tags":["git"],"body":" 先创建的项目后添加.gitignore文件时遇到不生效的情况 git rm -r --cached . git add . git commit -m 'update .gitignore' "},"/post/javaGetAttributeByReflect":{"url":"post/javaGetAttributeByReflect","title":"Java反射获取实体属性","date":"2017-09-19","tags":["Java","reflect"],"body":" ##Java反射获取实体属性 Java中可以听过反射获取未知实体的属性 Field field=message.getClass().getDeclaredField(\"value\"); field.setAccessible(true); field.get(message); "},"/post/javaGetResource":{"url":"post/javaGetResource","title":"Java中获取资源文件","date":"2017-08-09","tags":["Java","Resource"],"body":" ##Java中获取资源文件 Java中可以通过getClass().getResource()方法获取资源文件 比如我们有以下目录 |--project |--src |--main |--java |--Test.java |--file.txt |--target |--classes |--Test.class |--file.txt 现在要在Test.java中获取file文件 getClass().getResource(\"file.txt\") 或者 getClass().getResource(\"/file.txt\") 这里指定的路径可以为以Test.class为相对路径 也可以指定以classes为根的绝对路径 "},"/post/javaSendHttp":{"url":"post/javaSendHttp","title":"Java模拟发送http请求","date":"2017-04-15","tags":["java","http"],"body":" 导航 工具类 实现类工具类 import java.io.UnsupportedEncodingException; import java.net.URLEncoder; import java.security.KeyManagementException; import java.security.NoSuchAlgorithmException; import java.security.cert.X509Certificate; import java.util.ArrayList; import java.util.List; import java.util.Map; import javax.net.ssl.SSLContext; import javax.net.ssl.TrustManager; import javax.net.ssl.X509TrustManager; import clover.org.apache.commons.lang.StringUtils; import org.apache.http.HttpResponse; import org.apache.http.NameValuePair; import org.apache.http.client.HttpClient; import org.apache.http.client.entity.UrlEncodedFormEntity; import org.apache.http.client.methods.HttpDelete; import org.apache.http.client.methods.HttpGet; import org.apache.http.client.methods.HttpPost; import org.apache.http.client.methods.HttpPut; import org.apache.http.conn.ClientConnectionManager; import org.apache.http.conn.scheme.Scheme; import org.apache.http.conn.scheme.SchemeRegistry; import org.apache.http.conn.ssl.SSLSocketFactory; import org.apache.http.entity.ByteArrayEntity; import org.apache.http.entity.StringEntity; import org.apache.http.impl.client.DefaultHttpClient; import org.apache.http.message.BasicNameValuePair; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HttpUtils { /** * get * * @param host * @param path * @param method * @param headers * @param querys * @return * @throws Exception */ public static HttpResponse doGet(String host String path String method Map headers Map querys) throws Exception { HttpClient httpClient = wrapClient(host); HttpGet request = new HttpGet(buildUrl(host path querys)); for (Map.Entry e : headers.entrySet()) { request.addHeader(e.getKey() e.getValue()); } return httpClient.execute(request); } /** * post form * * @param host * @param path * @param method * @param headers * @param querys * @param bodys * @return * @throws Exception */ public static HttpResponse doPost(String host String path String method Map headers Map querys Map bodys) throws Exception { HttpClient httpClient = wrapClient(host); HttpPost request = new HttpPost(buildUrl(host path querys)); for (Map.Entry e : headers.entrySet()) { request.addHeader(e.getKey() e.getValue()); } if (bodys != null) { List nameValuePairList = new ArrayList(); for (String key : bodys.keySet()) { nameValuePairList.add(new BasicNameValuePair(key bodys.get(key))); } UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(nameValuePairList \"utf-8\"); formEntity.setContentType(\"application/x-www-form-urlencoded; charset=UTF-8\"); request.setEntity(formEntity); } return httpClient.execute(request); } /** * Post String * * @param host * @param path * @param method * @param headers * @param querys * @param body * @return * @throws Exception */ public static HttpResponse doPost(String host String path String method Map headers Map querys String body) throws Exception { HttpClient httpClient = wrapClient(host); HttpPost request = new HttpPost(buildUrl(host path querys)); for (Map.Entry e : headers.entrySet()) { request.addHeader(e.getKey() e.getValue()); } if (StringUtils.isNotBlank(body)) { request.setEntity(new StringEntity(body \"utf-8\")); } return httpClient.execute(request); } /** * Post stream * * @param host * @param path * @param method * @param headers * @param querys * @param body * @return * @throws Exception */ public static HttpResponse doPost(String host String path String method Map headers Map querys byte[] body) throws Exception { HttpClient httpClient = wrapClient(host); HttpPost request = new HttpPost(buildUrl(host path querys)); for (Map.Entry e : headers.entrySet()) { request.addHeader(e.getKey() e.getValue()); } if (body != null) { request.setEntity(new ByteArrayEntity(body)); } return httpClient.execute(request); } /** * Put String * @param host * @param path * @param method * @param headers * @param querys * @param body * @return * @throws Exception */ public static HttpResponse doPut(String host String path String method Map headers Map querys String body) throws Exception { HttpClient httpClient = wrapClient(host); HttpPut request = new HttpPut(buildUrl(host path querys)); for (Map.Entry e : headers.entrySet()) { request.addHeader(e.getKey() e.getValue()); } if (StringUtils.isNotBlank(body)) { request.setEntity(new StringEntity(body \"utf-8\")); } return httpClient.execute(request); } /** * Put stream * @param host * @param path * @param method * @param headers * @param querys * @param body * @return * @throws Exception */ public static HttpResponse doPut(String host String path String method Map headers Map querys byte[] body) throws Exception { HttpClient httpClient = wrapClient(host); HttpPut request = new HttpPut(buildUrl(host path querys)); for (Map.Entry e : headers.entrySet()) { request.addHeader(e.getKey() e.getValue()); } if (body != null) { request.setEntity(new ByteArrayEntity(body)); } return httpClient.execute(request); } /** * Delete * * @param host * @param path * @param method * @param headers * @param querys * @return * @throws Exception */ public static HttpResponse doDelete(String host String path String method Map headers Map querys) throws Exception { HttpClient httpClient = wrapClient(host); HttpDelete request = new HttpDelete(buildUrl(host path querys)); for (Map.Entry e : headers.entrySet()) { request.addHeader(e.getKey() e.getValue()); } return httpClient.execute(request); } private static String buildUrl(String host String path Map querys) throws UnsupportedEncodingException { StringBuilder sbUrl = new StringBuilder(); sbUrl.append(host); if (!StringUtils.isBlank(path)) { sbUrl.append(path); } if (null != querys) { StringBuilder sbQuery = new StringBuilder(); for (Map.Entry query : querys.entrySet()) { if (0 实现类 import java.util.HashMap; import java.util.Map; import org.apache.http.HttpResponse; import org.apache.http.util.EntityUtils; /** * 测试 * */ public class A { public static void main(String[] args) { String host = \"http://baidu.com\"; String path = \"/test/\"; String method = \"POST\"; Map headers = new HashMap(); Map body = new HashMap(); headers.put(\"Authorization\" \"\"); body.put(\"access_token\" \"\"); Map querys = new HashMap(); try { HttpResponse response = HttpUtils.doPost(host path method headers querys body); //获取response的body System.out.println(EntityUtils.toString(response.getEntity())); } catch (Exception e) { e.printStackTrace(); } } } "},"/post/sonarInstaller":{"url":"post/sonarInstaller","title":"SonarQube文档","date":"2017-04-29","tags":[],"body":" 1. sonar安装 mysql初始化数据库 CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci; CREATE USER 'sonar' IDENTIFIED BY 'sonar'; GRANT ALL ON sonar.* TO 'sonar'@'%' IDENTIFIED BY 'sonar'; GRANT ALL ON sonar.* TO 'sonar'@'localhost' IDENTIFIED BY 'sonar'; FLUSH PRIVILEGES; SonarQube 下载地址 配置SonarQube服务器sonar.properties sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance sonar.jdbc.username=sonar sonar.jdbc.password=sonar sonar.sorceEncoding=UTF-8 sonar.login=admin sonar.password=admin SonarScanner 下载地址 SonarScanner配置文件sonar-scanner.properties sonar.host.url=http://localhost:9000 sonar.projectKey=hmall-test sonar.projectName=hmall-test sonar.sources=src sonar.language=java sonar.login=admin sonar.password=admin 2.sonarLint安装 安装sonarLint插件 idea--plugns中查找sonarLint插件，并安装；安装完成后，重启idea； sonarLint配置 idea--设置--other setting--SonarLint General Setting--添加sonarQube servers--填写server URL idea--设置--other setting--SonarLint Project Setting--勾选Enable binding to remote sonarQube server--选择上一步创建的server--选择对应的项目 "}}